1.windows
方法一
cd ~/.vim/bundle/YouCompleteMe
当不需要c语言的补全时，可以自己运行install.py

当需要c语言的支持，可以带参数
install.py --clang-completer
可以手动下载LLVM-4.0.0-win64.exe(C:\Users\zealot\.vim\bundle\YouCompleteMe\third_party\ycmd\clang_archives)
LLVM的版本在C:\Users\zealot\.vim\bundle\YouCompleteMe\third_party\ycmd\cpp\ycm\CMakeLists.txt中可以查询：

方法二
cd ~
mkdir ycm_build
cd ycm_build
cmake -G "Visual Studio 15 2017 Win64" -DPATH_TO_LLVM_ROOT=D:\LLVM -DPYTHON_LIBRARY=D:\Python27\libs\python27.lib  . c:\Users\zealot\.vim\bundle\YouCompleteMe\third_party\ycmd\cpp
当需要c语法分析才加“-DPATH_TO_LLVM_ROOT=D:\LLVM”
cmake --build . --target ycm_core --config Release
注意: cmake的版本一定要能支持，Visual Studio版本的工程创建。

2.类linux
cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=/cygdrive/d/LLVM . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp




配置：
在目录\vimfiles\bundle\YouCompleteMe\third_party\ycmd\cpp\ycm下有个文件名叫.ycm_extra_conf.py。

.ycm_extra_conf.py是默认配置文件，如果是做项目的话可以把.ycm_extra_conf.py复制到项目目录，然后修改flag中的参数。(flag参数稍后讲)这样当你打开cpp的时候会自动载入当前文件的配置文件。找不到的时候使用默认路径

默认路径可以在_vimrc中添加

1
	let g:ycm_global_ycm_extra_conf =$VIM . '\vimfiles\bundle\YouCompleteMe\third_party\ycmd\cpp\ycm\.ycm_extra_conf.py'

flag参数修改

恩，你可以先备份一个副本。然后右键-editwithxxx

打开之后flag中保存的是一系列参数。

'-std=c++11'是支持c++11

上面所说的iostream文件找不到，你可以将include文件用如下格式添加到flag[......]的末尾

恩。。比如说我用的是mingw

1
	'-isystem',
2
	'D:/MinGW/lib/gcc/mingw32/4.8.1/include',
3
	'-isystem',
4
	'D:/MinGW/lib/gcc/mingw32/4.8.1/include/c++',
5
	'-isystem',
6
	'D:/mingw/lib/gcc/mingw32/4.8.1/include/c++/mingw32',

=  =记住c++可不止这一个include

我个去。。。=  =路径中注意是反斜线啊。--_--!


好了。。这下彻底配置完结了。。



"YCM插件的设置  
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>  
""let g:ycm_global_ycm_extra_conf ='D:\Documents\Tencent Files\414010421\FileRecv\.ycm_extra_conf.py'  
let g:ycm_global_ycm_extra_conf =$VIM . '\vimfiles\bundle\YouCompleteMe\third_party\ycmd\cpp\ycm\.ycm_extra_conf.py'  
""0为关闭载入配置文件提示  
let g:ycm_confirm_extra_conf = 0  
" 语法关键字补全  
let g:ycm_seed_identifiers_with_syntax = 1  
""补全之后自动关闭preview  
let g:ycm_autoclose_preview_window_after_completion = 1  
""自动补全快捷键  
let g:ycm_key_invoke_completion = '<S-Space>'  
""允许在字符串里补全（双引号）  
let g:ycm_complete_in_strings = 1  
" 开启 YCM 基于标签引擎  
let g:ycm_collect_identifiers_from_tags_files=1  
" 在注释输入中也能补全  
let g:ycm_complete_in_comments = 1  
" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)  
set completeopt=longest,menu  
" 离开插入模式后自动关闭预览窗口  
autocmd InsertLeave * if pumvisible() == 0|pclose|endif  
" 禁止缓存匹配项,每次都重新生成匹配项  
let g:ycm_cache_omnifunc=0  
"回车即选中当前项  
""inoremap <expr> <CR>       pumvisible() ? "\<C-n>" : "\<CR>"  
"YcmForceCompileAndDiagnostics"  
"YcmDebugInfo  
nnoremap <leader>rr :YcmForceCompileAndDiagnostics<CR>  
""错误  
let g:ycm_error_symbol = '>>'  
""警告  
let g:ycm_warning_symbol = '>*'  
""  
let g:ycm_key_list_select_completion = ['<Down>']
